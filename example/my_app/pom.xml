<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>examples.aglio</groupId>
    <artifactId>my-app</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <parent>
        <groupId>examples.aglio</groupId>
        <artifactId>my-app-root</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <phase>generate-resources</phase>
                        <configuration>
                            <tasks>
                                <mkdir dir="${project.build.directory}/classes/html" />
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!--
                Note that this section simply configures how the docker-maven-plugin works but does not actually cause
                it to run; it does not specify any <execution> sections. Instead, the executions are configured in a
                custom <profile> below called "docs". This means you don't have to run aglio with every build (which
                means slowing down the build); instead, just activate the "docs" profile when you want to build docs.

                IMPORTANT: This plugin requires Docker to be installed and for your current shell to be initialized
                with the Docker environment variables.

                For more info see https://github.com/rhuss/docker-maven-plugin/blob/master/doc/intro.md
                -->
                <groupId>org.jolokia</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.13.6</version>
                <configuration>
                    <!--
                    Note: to actually see Aglio's console output you'll need to run `docker logs <container id>` 
                    after the container finishes running.
                	-->
                    <showLogs>true</showLogs>
                    <verbose>true</verbose>
                    <removeVolumes>true</removeVolumes>

                    <image>aglio</image>
                    <images>
                        <image>
                            <!-- Specify name of Docker image to pull (i.e., `docker pull <image name>`). Pull is automatic. -->
                            <name>humangeo/aglio</name>

                            <!-- Give the container a name vs. Docker's randomly-generated names -->
                            <alias>aglio</alias>
                            <run>
                                <namingStrategy>alias</namingStrategy>
                                <!--
                                    The humangeo/algio Docker image is set up to run the 'aglio' command-line binary
                                    on startup (i.e., via the ENTRYPOINT command in the Dockerfile). The <cmd> below is
                                    the set of command-line arguments passed to the 'aglio' command. For more info on
                                    the aglio arguments see https://github.com/danielgtaylor/aglio.

                                    IMPORTANT: Note how volumes are mounted from host machine to Docker container below;
                                    the paths in these arguments use those shared volumes.
                                -->
                                <cmd>-i /shared_input_dir/my_rest_api.md -o /shared_output_dir/classes/html/my_rest_api.html</cmd>
                                <volumes>
                                    <bind>
                                        <!-- Mount the local ../my_docs dir to /shared_input_dir in the Docker container -->
                                        <volume>${project.parent.basedir}/my_docs:/shared_input_dir</volume>

                                        <!-- Mount the local ./target dir to /shared_output_dir in the Docker container -->
                                        <volume>${project.build.directory}:/shared_output_dir</volume>
                                    </bind>
                                </volumes>
                                <log>
                                    <enabled>true</enabled>
                                    <prefix>aglio</prefix>
                                </log>
                                <wait>
                                    <exec>
                                        <!--
                                        In effect, the following command ensures that Maven won't kill the Docker
                                        container while it's still running. More specifically, it prevents Maven from
                                        moving to the next build phase until the aglio command has finished running.
                                        This is important because in our use case one build phase (e.g., generate-resources)
                                        starts the container / run 'aglio', and another phase (e.g., process-resources)
                                        removes the container, like running 'docker rm' to clean up old containers. If
                                        Maven moves from 'generate-resources' to 'process-resources' too quickly it can
                                        cause the container to be killed and removed BEFORE Aglio has finished running.

                                        Note that this does NOT cause Maven to wait X seconds until moving on to the next
                                        build phase. The "wait" timer only applies to running containers; as soon as the
                                        container dies Maven will proceed.
                                        -->
                                        <postStart>/bin/bash -c sleep\ 300</postStart>
                                    </exec>
                                </wait>
                            </run>
                        </image>
                    </images>
                </configuration>
                <executions>
                    <execution>
                        <id>start-the-container</id>
                        <!--
                            IMPORTANT: Run as part of the generate-resources phase so the Aglio-generated HTML will be
                            included in the output JAR file (i.e., generated BEFORE .jar is made as part of 'package' phase).
                        -->
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>remove-the-container</id>
                        <phase>process-resources</phase>
                        <goals>
                            <!--
                                Do some clean-up and removing the container now that aglio is done (akin to running 'docker rm').
                                Note that if you don't do this you end up with hundreds of dead containers.
                            -->
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
